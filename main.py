"""
remove_red_digits_bbox.py
–£–¥–∞–ª—è–µ—Ç –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω-–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫.
–ò—â–µ–º –∫—Ä–∞—Å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏  ‚áí  –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã  ‚áí  –æ—Å—Ç–∞–≤–ª—è–µ–º
—Ç–æ–ª—å–∫–æ —É–∑–∫–∏–µ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏  ‚áí  inpaint.

üí°  –ó–≤—É–∫ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
"""

import cv2
import numpy as np
from tqdm import tqdm
from pathlib import Path

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–∞–π–ª—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SRC_VIDEO = Path("IMG_6488.MP4")
OUT_VIDEO = Path("clean_no_audio.mp4")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HSV –∫—Ä–∞—Å–Ω–æ–≥–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOW1 = np.array([0,   90, 100], dtype=np.uint8)
UP1  = np.array([10, 255, 255], dtype=np.uint8)
LOW2 = np.array([170, 90, 100], dtype=np.uint8)
UP2  = np.array([180, 255, 255], dtype=np.uint8)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MIN_AREA = 400       # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞
MAX_AREA = 15000     # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (—á—Ç–æ–±—ã –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã)
MIN_RATIO = 3.0      # —à–∏—Ä–∏–Ω–∞ / –≤—ã—Å–æ—Ç–∞
MAX_RATIO = 20.0     # –∑–∞–ø–∞—Å

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è + inpaint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KERNEL = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
DILATE_ITER = 2       # —Ä–∞—Å—à–∏—Ä—è–µ–º –º–∞—Å–∫—É
INPAINT_RAD = 3       # —Ä–∞–¥–∏—É—Å Telea

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
assert SRC_VIDEO.exists(), "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Ç–æ–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cap   = cv2.VideoCapture(str(SRC_VIDEO))
fps   = cap.get(cv2.CAP_PROP_FPS)
w     = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
h     = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
total = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
four  = cv2.VideoWriter_fourcc(*"mp4v")
out   = cv2.VideoWriter(str(OUT_VIDEO), four, fps, (w, h))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
for _ in tqdm(range(total), desc="–ß–∏—Å—Ç–∏–º"):
    ok, frame = cap.read()
    if not ok:
        break

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    mask = cv2.bitwise_or(cv2.inRange(hsv, LOW1, UP1),
                          cv2.inRange(hsv, LOW2, UP2))

    # —à—É–º ‚Äî> –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, KERNEL)
    for _ in range(DILATE_ITER):
        mask = cv2.dilate(mask, KERNEL)

    # ---------- —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã ----------
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL,
                                   cv2.CHAIN_APPROX_SIMPLE)
    clean_mask = np.zeros_like(mask)

    for cnt in contours:
        x, y, w_box, h_box = cv2.boundingRect(cnt)
        area   = w_box * h_box
        ratio  = w_box / h_box if h_box else 0

        if (MIN_AREA <= area <= MAX_AREA and
            MIN_RATIO <= ratio <= MAX_RATIO):
            # —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ ¬´—Å—Ç—Ä–æ—á–∫—É —Ü–∏—Ñ—Ä¬ª ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å–∫—É
            cv2.rectangle(clean_mask, (x, y),
                          (x + w_box, y + h_box), 255, -1)

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–∏—à–µ–º –∫–∞–¥—Ä –∫–∞–∫ –µ—Å—Ç—å
    if clean_mask.mean() < 1:
        out.write(frame)
        continue

    cleaned = cv2.inpaint(frame, clean_mask,
                          INPAINT_RAD, cv2.INPAINT_TELEA)
    out.write(cleaned)

cap.release()
out.release()
print("–ì–æ—Ç–æ–≤–æ:", OUT_VIDEO)
